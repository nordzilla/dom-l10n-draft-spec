<pre class='metadata'>
Title: DOM Localization
Shortname: dom-l10n
Level: 1
Status: DREAM
Group: MOZILLA
URL: https://nordzilla.github.io/dom-l10n-draft-spec/
Editor: Erik Nordin, Mozilla https://www.mozilla.org/, nordzilla@mozilla.com, https://github.com/nordzilla
Editor: Zibi Braniecki, Mozilla https://www.mozilla.org/, zbraniecki@mozilla.com, https://github.com/zbraniecki
Abstract: This draft defines a proposal for a web standard for DOM localization. DOM localization is a system that allows authors and users to attach [=localization resources=] to structured documents (e.g., HTML documents). By separating the [=localization resources=] of documents from the structure, presentation and content, DOM localization enables Web applications to be localizable.
Markup Shorthands: css yes, markdown yes
</pre>

Glossary of Terms {#glossary}
=====================

Key termoniology used by this specification.

> > DOM Localization: <dfn>localization arguments</dfn>
>
> A set of key-value pairs that serve as arguments to provide the [=localization context=] when formatting a [=message=].
>
> Examples in this specification use the keyword `l10n-args` when annotating DOM elements with localization arguments.

> > DOM Localization: <dfn>localization context</dfn>
>
> A context of [=localization resources=] similar to a JavaScript document context, or CSS stylesheet,
> with the ability to format localized [=messages=].
>
> A context may be declared in HTML and scoped to a document, or may stand alone and be created programmatically via JavaScript.

> > DOM Localization: <dfn>localization identifier</dfn>
>
> An identifier with which to annotate DOM elements and fragments to be localized by a [=localization context=].
>
> Examples in this specification use the keyword `l10n-id` when annotating DOM elements with a localization identifier.

> > DOM Localization: <dfn>localization resource</dfn>
>
> A file that contains [=messages=] that are compatible with [=MessageFormat 2.0=].
>
> Many localization resources may be included in a [=localization context=].
>
> Each supported locale may have its own localized version of a resource.

> > DOM Localization: <dfn>message</dfn>
>
> Localized content that is compatible with [=MessageFormat 2.0=],
> and that can be looked up by a unique [=localization identifier=].
>
> Messages may contain variables that can be modified at the time of formatting via [=localization arguments=].
>
> Messages belong to a [=localization resource=]. A [=localization resource=] may contain many messages.

> > DOM Overlays: <dfn>text-level elements</dfn>
>
> A dom-overlays element that operates on text and is always allowed to be inserted into localized content by translators.
>
> e.g. <{b}> and <{em}>.

> > DOM Overlays: <dfn>functional elements</dfn>
>
> A dom-overlays element for which the developer may specify attributes for translators to add to the element.
>
> e.g. <{img}> and `atl`.

> > DOM Overlays: <dfn>structured elements</dfn>
>
> An element which is part of a nested structure created by the developer that the translator should be able to modify as appropriate.
>
> e.g. <{ul}>/<{ol}> and <{li}>.

> > <dfn>MessageFormat 2.0</dfn>
> A new, generic localization system that is being developed for inclusion in Unicode and JavaScript.
>
> ([Working Group GitHub](https://github.com/unicode-org/message-format-wg#messageformat-working-group))
>
> MessageFormat Syntax in this document is based on the following proposal and is subject to change.
>
> [Syntax Proposal](https://github.com/eemeli/message-format-wg/blob/wip/spec-syntax.md)

> > <dfn>web stack</dfn>
>
> The composition of HTML, DOM, CSS, and JavaScript and related technologies.

Introduction {#intro}
=====================

Note: Many of the ideas expressed in this proposal are inspired by [projectfluent](https://github.com/projectfluent/).

The [=web stack=] is commonly used to create applications with both content and user interface. One of the core value propositions of the stack is the open, semantic and pluggable nature of the technology.

For example CSS provides technology to apply styles and themes to HTML Documents, but also enables web browsers and third-party addons such as extensions or accessibility tools to adjust the styles and themes at runtime.

In a similar way, DOM localization proposes to introduce a localization component of the [=web stack=].
This component would allow for HTML documents to be localized in a way that enables web browsers and third-party extensions to augment documents for the benfit of the user's experience.
Such an open system would allow for construction of localizable web applications that can be introspected for semantic information, be augmented by external code for different forms of presentation (screen readers, VR etc.), and be accessible to the global audience.


Relation to MessageFormat 2.0 {#message-format20}
=====================

We propose that the DOM localization system should be built on top of [=MessageFormat 2.0=], providing a unified localization experience for JavaScript applications and HTML documents.

Proposed Solution {#proposed-solution}
=====================

The proposed solution provides cohesive developer experience between DOM and JavaScript localization, compatible with {{CSS}}, [ShadowDOM](https://wicg.github.io/webcomponents/spec/shadow/) and other aspects of the [=web stack=].

## Localization Context

We propose to introduce a notion of a [=localization context=], similar to JavaScript document context, or CSS stylesheet, which would be composed of a list of [=localization resources=] declared in the <{head}> of the document.

Similar to stylesheets, developers will be able to programmatically construct any number of [=localization contexts=], as well as declaratively define them for HTML documents, shadow DOM trees etc.

### Document Localization Context

By default, [=localization resources=] decalred in the <{head}> element of a document should be aggregated into a [=localization context=] that is scoped to that document.

<xmp highlight="html">
<html>
  <head>
    <link rel="localization" src="uri/for/resource1.mf" />
    <link rel="localization" src="uri/for/resource2.mf" />
  </head>
</html>
</xmp>

### Multiple Document Localization Contexts

It could be also possible to allow for multiple explicitly named [=localization contexts=], each with their own [=localization resources=] and scopes

<xmp highlight="html">
<html>
  <head>
    <l10n-context name="menu">
      <link rel="localization" src="uri/for/resource1.mf" />
      <link rel="localization" src="uri/for/resource2.mf" />
    </l10n-context>
    <l10n-context name="chrome">
      <link rel="localization" src="uri/for/resource1.mf" />
      <link rel="localization" src="uri/for/resource3.mf" />
    </l10n-context>
  </head>
</html>
</xmp>

## Localization Core Attributes

We propose to introduce a set of (potentially namespaced) core attributes to HTML that would allow developers to declaratively or programmatically bind DOM elements and fragments to localization [=messages=].

The [=messages=] loaded into the document context(s) would then be used to localize the elements or fragments.

### Localization Identifier

Assume a document is constructed with a [=localization context=] that contains [=localization resource=] with a [=message=] such as:

<xmp highlight="properties">
key1 = Document Header
</xmp>

Note: This represents a [=localization resource=] file using [=MessageFormat 2.0=] syntax that is subject to change.

A document with such a context can then be declaratively written to localize HTML content by augmenting elements with [=localization identifiers=].

<xmp highlight="html">
<html>
  <body>
    <h1 l10n-id="key1" />
  </body>
</html>
</xmp>

If a [=localization identifier's=] value matches a [=message=] contained within the document's [=localization context=], then the element to which the
identifier belongs will be localized accordingly.

### Localization Arguments

The second proposed core attribute is a collection of values, similar to {{dataset}}. The [=localization arguments=] contain variables passed from the developer to
the [=localization context=] for use when resolving a [=message=]:

<xmp highlight="properties">
greetings-msg = Welcome, {$userName}.
</xmp>

Note: This represents a [=localization resource=] file using [=MessageFormat 2.0=] syntax that is subject to change.

<xmp highlight="html">
<html>
  <body>
    <h1 l10n-id="greetings-msg" l10n-args='{"userName":"John"}'/>
  </body>
</html>
</xmp>

The ability to provide a document with a [=localization context=], in addition to the ability to declaratively annotate elements and fragments
within the document, provides a basis of the DOM localization system.

# DOM API

In order for the system to be accessible programmatically, DOM localization provides an API to operate on the [=localization context=] and its elements.

The main paradigm is a declarative annotation of elements, much like `class` is used in CSS to bind style classes to element:

<xmp highlight="js">
let h1 = document.querySelector("h1");
h1.l10n.setAttributes("greetings-msg", { userName: "John" });
</xmp>

This separates the programmatic annotation of the DOM tree with localization bindings, from the application of the localization, which can happen asynchornously and be synced to animation and paint frames.

In cases where the developer needs to operate on localization [=messages=] programmatically, users can access the main document's context to format a [=message=]:

<xmp highlight="js">
let msg = await document.l10n.formatMessage("greetings-msg", {
  userName: "Mary",
});
</xmp>

# Resource Resolution

In this proposal, the paths provided to the [=localization contexts=] are intentionally ambigious, as the mechanism to resolve [=localization resources=] is nontrivial and will require a significant amount of up-front design.

The main aspect of the mechanism is that it has to enable the engine to reason about the locales that the user or app requested, and the locales in which [=localization resources=] are available.
It must be able to negotiate between these two sets to provide an optimal solution for formatting [=messages=] in the given [=localization context=].

A potential way to produce sufficient information may look like this:

<xmp highlight="html">
<html>
  <head>
    <l10n-meta
      available-locales="de, fr, it"
      default-locale="fr"
      path-schema="/static/l10n/{locale}/{resId}"
    />
    <link rel="localization" src="path/to/resource1.mf" />
    <link rel="localization" src="path/to/resource2.mf" />
  </head>
</html>
</xmp>

This would result in the engine taking user requested locales for the app, negotiating them against the listed available locales, and then fetching the [=localization resources=] using the resolved path schema.

An example of a fully resolved path may look like the following:

<xmp highlight="html">
/static/l10n/de-AT/path/to/resource1.mf
</xmp>

# Custom Contexts

Similar to custom stylesheets, it should be possible to programmatically create custom [=localization contexts=]:

<xmp highlight="js">
let ctx = new LocalizationContext([
  "uri/for/res1.mf",
  "uri/for/res2.mf",
]);
let msg = await ctx.formatMessage("greetings-msg", {
  userName: "Mary",
});
</xmp>

# Attribute Localization

HTML and Web Components provide elements with translatable attributes such as {{title}} and {{placeholder}}.

It may be possible to use [=MessageFormat 2.0=] concept of localization groups to cluster a number of localization [=messages=] into a group that will be used to declaratively localize an HTML element and its attributes together:

<xmp highlight="properties">
ok-button
=========
content = Click me
title = Title to show on hover
ariaLabel = Main button
</xmp>

Note: This represents a [=localization resource=] file using [=MessageFormat 2.0=] syntax that is subject to change.

<xmp highlight="html">
<html>
  <body>
    <button l10n-id="ok-button" />
  </body>
</html>
</xmp>

Such atomic binding between a UI widget and a composed localization unit would be particularly useful for localization of Web Components where rich set of attributes could be used to carry localization [=messages=] across the boundary from the document to shadow DOM.

Such binding would also enable locale consistency for the whole UI element ensuring that content and attributes of each element are localized into the same locale, be it primary, or any fallback.

# Web Components

There are two ways to approach web components localization.

## Using Document Localization Context

In this model, the web component exposes a set of attributes that are localizable and the document provides the translations out of its own [=localization context=]:

<xmp highlight="properties">
widget1
=======
content = Click me
title = Title to show on hover
ariaLabel = Main button
</xmp>

Note: This represents a [=localization resource=] file using [=MessageFormat 2.0=] syntax that is subject to change.

<xmp highlight="html">
<html>
  <head>
    <link rel="localization" src="uri/for/resource1.mf" />
    <link rel="localization" src="uri/for/resource2.mf" />
  </head>
  <body>
    <my-widget l10n-id="widget1"/>
  </body>
</html>
</xmp>

## Using its own Localization Context

Alternatively, some components may come with their own [=localization resources=] and may create their own custom [=localization contexts=] to be used for localization of their shadow DOM.

# L10n Mutations

We propose an extension of a [=localization context=] with a number of methods curated for use in context of DOM Fragments.

DOM [=localization context=] would have a concept of `roots`: elements to which special mutation observers are attached.

Such [=localization contexts=] would therefore monitor for any changes to the l10n attributes under its roots and react to those mutations by translating the affected elements.

By default, document's [=localization context=] would cover the whole document, but it should be possible to create custom [=localization contexts=].

<xmp highlight="js">
let ctx = new DOMLocalizationContext([
  "uri/for/res1.mf",
  "uri/for/res2.mf",
]);
let elem = document.getElementById("menu");

// Initial translation of the fragment
await ctx.translateFragment(elem);

ctx.connectRoot(elem);
</xmp>

From the moment `connectRoot` is called for the given element, any changes to the element or its children that affect localization would be coalesced into a localization frame, which happens right before layout / animation frame.

# DOM Overlays

> Note: Many of the core ideas discussed in this section are inspired by [projectfluent](https://projectfluent.org/), particularly the following two sources:
>
> * The [DOM Overlays wiki](https://github.com/projectfluent/fluent.js/wiki/DOM-Overlays), written by Staś Małolepszy.
> * The ideas for [New Features (rev 3)](https://github.com/zbraniecki/fluent-domoverlays-js/wiki/New-Features-%28rev-3%29), written by Zibi Braniecki

We propose that it should be possible for translated [=messages=] to refer to or contain DOM elements within the [=message=] itself.
For example, a localized [=message=] in one locale might like to add <{b}> elements in appropriate places to make the text bold.
This is a delicate and nuanced situation that requires heavy scrutiny, since inserting arbitrary HTML can pose many security risks.

We propose that there should exists three categories of overlay elements:

> > <b><em>[=text-level elements=]</em></b>
>
> These are a subset of elements that operate on text and are deemed to be
> always safe for trnslator to use at any time.
>  * <{em}>
>  * <{strong}>
>  * <{sup}>
>  * etc.
>
> A [complete list](https://html.spec.whatwg.org/multipage/text-level-semantics.html) of text-level elements is defined by WHATWG.

For example, a developer may create a paragraph element such as the following.

<xmp highlight="html">
<p l10n-id="key1">Message to be localized.<p>
</xmp>

A translator should be able to provide a translation that contains [=text-level elements=] if desired.

<xmp highlight="properties">
key1 = This is <em>my</em> localized message.
</xmp>

Note: This represents a [=localization resource=] file using [=MessageFormat 2.0=] syntax that is subject to change.

<xmp highlight="html">
<p>This is <em>my</em> localized message.<p>
</xmp>

At which point, the final HTML would be equivalent to the following localized content in which the <{em}> element is interpreted correctly as HTML and rendered accordingly.

---

> > <b><em>[=functional elements=]</em></b>
>
> Functional elements are elements such as <{img}> and <{a}> that may have attributes for which the developer
> desires a translator to provide localized translations.

For example, a developer may provide an <{img}> as a [=functional element=] with a `src` attribute.

<xmp highlight="html">
    <p l10n-id="key1">
        Hi, <img src="world.png">
    </p>
</xmp>

A translator should be able to provide an `alt` attribute for the <{img}> element.

<xmp highlight="properties">
key1 = Hello, <img l10n-name="world" alt="world">!
</xmp>

Note: This represents a [=localization resource=] file using [=MessageFormat 2.0=] syntax that is subject to change.

The resulting HTML should look like the following:

<xmp highlight="html">
    <p l10n-id="key1">
        Hello, <img src="world.png" alt="world">!
    </p>
</xmp>

This example allows the translator to add the `alt` attribute unconstrained, but
it will likely be important to design syntax such that the translator can only add or modify
a localized attribute if it is explicitly requested by the developer. This would ensure that the translator
cannot override an attribute that is not meant to be localized, such as `src` or `href`, unless
the translator has explicit permission to do so. 

---

> > <b><em>[=structured elements=]</em></b>
>
> While [=text-level elements=] are allowed at all times, and [=functional elements=] have attributes that may
> be provided or modified by a translator, a [=structured element=] imposes a structure that should be part
> of the localization.

For example, the developer may want to have <{ul}> or <{ol}> elements be part of the localization, in which the translator
can then add <{li}> elements. It should also be possible for the developer nest elements that each have their own unique [=localization identifiers=].

<xmp highlight="html">
    <div l10n-id="key1">
      <ul>
      </ul>
    </div>
</xmp>

A translator should then be able to provide a localized message along with <{li}> elements.

<xmp highlight="properties">
key1 = This is a localized list:
  <ul>
    <li>Localized item 1</li>
    <li>Localized item 2</li>
    <li>Localized item 3</li>
  </ul>
</xmp>

Note: This represents a [=localization resource=] file using [=MessageFormat 2.0=] syntax that is subject to change.

The resulting HTML should look like the following:

<xmp highlight="html">
    <div l10n-id="key1">
        This is a localized list:
        <ul>
            <li>Localized item 1</li>
            <li>Localized item 2</li>
            <li>Localized item 3</li>
        </ul>
    </div>
</xmp>

## Security Considerations

### Specify Localizable Attributes Explicitly

With regard to [=functional elements=], we may want to adopt an opt-in-only model in which a developer
must explicitly list which attributes should be localizable.

<xmp highlight="html">
    <p l10n-id="key1" l10n-attrs="alt">
        Hi, <img src="world.png">
    </p>
</xmp>

In this model, `alt` is the only attribute that localizers will be able to modify in translation.

### Opaque Elements

Developers should have a means to specify elements that are opaque to localization, whose content cannot
be modified by translators.

Such a syntax could be the following:

<xmp highlight="html">
    <div l10n-id-opaque="true">
      Always display this sentence.
    </div>
</xmp>

### Retain Element Identify

<xmp highlight="html">
<div data-l10n-id="submit-form">
  <button id="submit">Submit</button>
</div>
</xmp>

<xmp highlight="properties">
submit-form = <button>Submit</button>
</xmp>

Note: This represents a [=localization resource=] file using [=MessageFormat 2.0=] syntax that is subject to change.

Even after multiple retranslations, the identity of the `<button>` element should be the same.
The element should not be recreated by the localization layer.

### Vestigial Content After Retranslation

DOM Overlays should be designed in a way that it is safe to retranslate content without leaving behind
a vestige of what was there before. Given that some languages may overlay different HTML elements,
we need to ensure that when a language changes and content is retranslated, we are able to keep track of
and remove all content that existed due to the previous translation.
