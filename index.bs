<pre class='metadata'>
Title: DOM Localization
Shortname: dom-l10n
Level: 1
Status: DREAM
Group: MOZILLA
URL: https://nordzilla.github.io/dom-l10n-draft-spec/
Editor: Erik Nordin, Mozilla https://www.mozilla.org/, nordzilla@mozilla.com, https://github.com/nordzilla
Editor: Zibi Braniecki, Mozilla https://www.mozilla.org/, zbraniecki@mozilla.com, https://github.com/zbraniecki
Abstract: This draft defines a proposal for a web standard for DOM localization. DOM localization is a system that allows authors and users to attach localization resources to structured documents (e.g., HTML documents). By separating the localization resources of documents from the structure, presentation and content, DOM localization enables Web applications to be localizable. 
Markup Shorthands: css yes, markdown yes
</pre>

Introduction {#intro}
=====================

Web stack composed of HTML, DOM, CSS and Javascript is commonly used to create applications with both content and user interface. One of the core value propositions of the stack is open, semantic and pluggable nature of the technology.

For example CSS provides technology to style and theme HTML documents, but also enables web browsers and third-party addons such as extensions or accessibility tools to adjust the style and theme at runtime.

In a similar way DOM localization proposes to introduce a localization component of the stack that would allow for HTML documents to be localized in a way that allows web browsers and third-party extensions to augument the experience of using the documents for the benfit of the user.
Such an open system would allow for construction of localizable web applications which can be introspected for semantic information, augumented by external code for different forms of presentation (screen readers, VR etc.) and accessible to the global audience.

Relation to MessageFormat 2.0 {#message-format20}
=====================

Unicode MessageFormat 2.0 is a new generic localization system being developed for inclusion in Unicode and JavaScript.
We propose that the DOM localization system to be build on top of MessageFormat 2.0, giving a unified experience of localization of JavaScript applications and HTML documents.

Proposed Solution {#proposed-solution}
=====================

The proposed solution provides cohesive developer experience between DOM and JavaScript localization, compatible with CSS, Shadow DOM and other aspects of web stack.

## Localization Context

We are proposing to introduce a notion of a localization context, similar to JavaScript document context, or CSS stylesheet, which would be composed of a list of localization resources declared in the <{head}> of the document.

Similarly to stylesheets, developers would be able to programmatically construct any number of localization contexts, as well as declaratively define them for HTML documents, shadow DOM trees etc.

### Document Localization Context

Default use case of a localization context would be a context declared in the <{head}> element of a document scoped to that document and used for localization of it.

<xmp highlight="html">
<html>
  <head>
    <link rel="localization" src="uri/for/resource1.mf" />
    <link rel="localization" src="uri/for/resource2.mf" />
  </head>
</html>
</xmp>

### Multiple Document Localization Contexts

It could be also possible to allow for multiple localization contexts to be listed for the document to use:

<xmp highlight="html">
<html>
  <head>
    <l10n-context name="menu">
      <link rel="localization" src="uri/for/resource1.mf" />
      <link rel="localization" src="uri/for/resource2.mf" />
    </l10n-context>
    <l10n-context name="chrome">
      <link rel="localization" src="uri/for/resource1.mf" />
      <link rel="localization" src="uri/for/resource3.mf" />
    </l10n-context>
  </head>
</html>
</xmp>

## Localization Attributes

We are proposing to introduce a set of (potentially namespaced) attributes to HTML that would allow developers to declaratively or programmatically bind the DOM elements and fragments to localization messages.

The messages loaded into the document context(s) would be then used to localize them.

### Localization Identifier

Document constructed with a localization context containing a resource with a message such as (pseudo-syntax for MessageFormat 2.0 compatible resource file):

<xmp highlight="properties">
key1 = Document Header
</xmp>

can be then used to localize HTML content such as:

<xmp highlight="html">
<html>
  <body>
    <h1 l10n-id="key1" />
  </body>
</html>
</xmp>

### Localization Arguments

Second proposed core attribute is a collection of values, similar to {{dataset}} which contains variables passed from the developer to localization context for use when resolving a given message:

<xmp highlight="properties">
greetings-msg = Welcome, { $userName }.
</xmp>

<xmp highlight="html">
<html>
  <body>
    <h1 l10n-id="greetings-msg" l10n-args-userName="John" />
  </body>
</html>
</xmp>

The combination of those two attributes used to annotate HTML elements and fragments, together with ability to annotate the document with localization context provides the basis of the DOM localization system.

# DOM API

In order for the system to be accessible programmatically, DOM localization provides an API to operate on the context, and elements.

The main paradigm is a declarative annotation of elements, much like `class` is used in CSS to bind style classes to element:

<xmp highlight="js">
let h1 = document.querySelector("h1");
h1.l10n.setAttributes("greetings-msg", { userName: "John" });
</xmp>

This separates the programmatic annotation of the DOM tree with localization bindings, from the application of the localization, which can happen asynchornously and be synced to animation and paint frames.

In cases where the developer needs to operate on localization messages programmatically, users can access the main document's context:

<xmp highlight="js">
let msg = await document.l10n.formatMessage("greetings-msg", {
  userName: "Mary",
});
</xmp>

# Resource Resolution

In the proposal the paths provided to the localization contexts are intentionally ambigious, as the mechanism to resolve localization resources is not trivial and has to be well thought through.

The main aspect of the mechanism is that it has to enable the engine to reason about which locales the resources are available in, which locales the user or app requested, negotiate between them, and handle any fallbacks between them.

A potential way to produce sufficient information may look like this:

<xmp highlight="html">
<html>
  <head>
    <l10n-meta
      available-locales="de, fr, it"
      default-locale="fr"
      path-schema="/static/l10n/{locale}/{resId}"
    />
    <link rel="localization" src="path/to/resource1.mf" />
    <link rel="localization" src="path/to/resource2.mf" />
  </head>
</html>
</xmp>

It would result in the engine taking user requested locales for the app, negotiating it against the listed available locales and then fetch the resources using the resolved path schema.
An example actual path may be `/static/l10n/de-AT/path/to/resource1.mf`.

# Custom Contexts

Similarly to custom stylesheets it should also be possible to crate custom localization contexts:

<xmp highlight="js">
let ctx = new LocalizationContext([
  "uri/for/res1.mf",
  "uri/for/res2.mf",
]);
let msg = await ctx.formatMessage("greetings-msg", {
  userName: "Mary",
});
</xmp>

# Web Components

There are two ways to approach web components localization.

## Using Document Localization Context

In that model, the web component exposes a set of attributes that are localizable and the document provides the translations out of its own localization context:

<xmp highlight="properties">
widget1 {
  .content = Click me
  .title = Title to show on hover
  .ariaLabel = Main button
}
</xmp>

<xmp highlight="html">
<html>
  <head>
    <link rel="localization" src="uri/for/resource1.mf" />
    <link rel="localization" src="uri/for/resource2.mf" />
  </head>
  <body>
    <my-widget data-l10n-id="widget1"/>
  </body>
</html>
</xmp>

## Using its own Localization Context

Alternatively, some components may come with its own localization resources and create its own custom localization contexts to be used for localization of their shadow DOM.

# Attribute Localization

HTML and Web Components provide elements with translatable attributes such as {{title}} and {{placeholder}}.

It may be possible to use MessageFormat 2.0 concept of localization groups to cluster a number of localization messages into a group that will be used to localize an HTML element and its attributes together:

<xmp highlight="properties">
ok-button {
  .content = Click me
  .title = Title to show on hover
  .ariaLabel = Main button
}
</xmp>

<xmp highlight="html">
<html>
  <body>
    <button l10n-id="ok-button" />
  </body>
</html>
</xmp>

Such atomic binding between a UI widget and a composed localization unit would be particularly useful for localization of Web Components where rich set of attributes could be used to carry localization messages across the boundary from the document to shadow DOM.

Such binding would also enable locale consistency for the whole UI element ensuring that content and attributes of each element are localized into the same locale, be it primary, or any fallback.

# L10n Mutations

We propose an extension of a Localization Context with a number of methods curated for use in context of DOM Fragments.

DOM Localization Context would have a concept of `roots` - elements which a special mutation observer is attached to.

Such context would therefore monitor for any changes to the l10n attributes under its roots and react to those mutations by translating the affected elements.

By default, document's Localization Context would cover the whole document, but custom contexts could be created:

<xmp highlight="js">
let ctx = new DOMLocalizationContext([
  "uri/for/res1.mf",
  "uri/for/res2.mf",
]);
let elem = document.getElementById("menu");

// Initial translation of the fragment
await ctx.translateFragment(elem);

ctx.connectRoot(elem);

// From that moment, any changes to the elem or its children
// that affect localization would be coalesced into a localization
// frame happening right before layout / animation frame.
</xmp>
